version: 2.1

orbs:
  ruby: circleci/ruby@1.3.0
  node: circleci/node@5.0.0
  browser-tools: circleci/browser-tools@1.2.3

jobs:
  build:
    docker:
      - image: cimg/ruby:3.0.3-node
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          cache-only-lockfile: false
          cache-version: v2
          pkg-manager: yarn

  test:
    parallelism: 3
    docker:
      - image: cimg/ruby:3.0.3-node
      - image: cimg/postgres:12.9
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: test_at_home_test
          POSTGRES_PASSWORD: ""
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci
      PGPASSWORD: ""
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          cache-only-lockfile: false
          cache-version: v2
          pkg-manager: yarn
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace

      # Precompile assets
      # Load assets from cache if possible, precompile assets then save cache
      # Multiple caches are used to increase the chance of a cache hit
      # https://circleci.com/docs/2.0/caching/#full-example-of-saving-and-restoring-cache
      - restore_cache:
          keys:
            - asset-cache-v1-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
            - asset-cache-v1-{{ arch }}-{{ .Branch }}
            - asset-cache-v1

      - run: bundle exec rake assets:precompile

      - save_cache:
          key: asset-cache-v1-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - public/assets
            - tmp/cache/assets/sprockets

      - ruby/rspec-test

  brakeman:
    docker:
      - image: cimg/ruby:3.0.3-node
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Run Brakeman scan
          command: bundle exec brakeman

  dependency_audits:
    docker:
      - image: cimg/ruby:3.0.3-node
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          cache-only-lockfile: false
          cache-version: v2
          pkg-manager: yarn
      - run:
          name: Bundle audit
          command: bundle exec rake bundler:audit
      - run:
          name: Yarn audit
          command: bundle exec rake yarn:audit

  owasp_scan:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - checkout

      # attempt to restore cache from build step to speed up local server startup time
      # This will need to be updated if the cache key for the `install-(deps|packages)` steps changes
      - restore_cache:
          keys:
            - gems-v1-{{ checksum "Gemfile.lock"  }}-{{ .Branch }}
      - restore_cache:
          keys:
            - node-deps-{{ arch }}-v2-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

      - run:
          name: Start up local server
          command: docker-compose -f docker-compose.ci.yml up -d
      - run:
          name: Create reports directory
          command: mkdir reports
      - run:
          name: Run OWASP Zap
          command: |
            docker run -v $(pwd)/zap.conf:/zap/wrk/zap.conf:ro -v $(pwd)/reports:/zap/wrk:rw --rm \
              --user zap:$(id -g) --network="project_test-at-home" -t owasp/zap2docker-weekly \
              zap-baseline.py -t http://web:3000 -c zap.conf -I -i -r owasp_report.html
      - store_artifacts:
          path: reports/owasp_report.html

  a11y_scan:
    docker:
      - image: cimg/ruby:3.0.3-node
      - image: cimg/postgres:12.9
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: test_at_home_development
          POSTGRES_PASSWORD: ""
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci
      PGPASSWORD: ""
      RAILS_ENV: ci
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          cache-only-lockfile: false
          cache-version: v2
          pkg-manager: yarn
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace

      # Precompile assets
      # Load assets from cache if possible, precompile assets then save cache
      # Multiple caches are used to increase the chance of a cache hit
      # https://circleci.com/docs/2.0/caching/#full-example-of-saving-and-restoring-cache
      - restore_cache:
          keys:
            - asset-cache-v1-ci-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
            - asset-cache-v1-ci-{{ arch }}-{{ .Branch }}
            - asset-cache-v1-ci

      - run: bundle exec rake assets:precompile

      - save_cache:
          key: asset-cache-v1-ci-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - public/assets
            - tmp/cache/assets/sprockets

      - run:
          name: Start server
          command: ./bin/rails server -p 3000
          background: true

      - run:
          name: Wait for server
          command: dockerize -wait http://localhost:3000 -timeout 1m

      - run:
          name: Run pa11y-ci
          command: yarn run pa11y-ci

  deploy_foundry_1:
    docker:
      - image: cimg/ruby:3.0.3-node
    steps:
      - checkout
      - when:
          condition:
            or:
              - equal: [<< pipeline.git.branch >>, "main"]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - ruby/install-deps
            - run:
                name: Vendor gems
                command: bundle cache --all
            - node/install-packages:
                cache-only-lockfile: false
                cache-version: v2
                pkg-manager: yarn
            - run:
                name: Install Cloud Foundry CLI
                command: |
                  curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
                  sudo dpkg -i cf-cli_amd64.deb
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, "https://github.com/usagov/test-at-home"]
              - equal: [<< pipeline.git.branch >>, "main"]
          steps:
            - run:
                name: Deploy to foundry 1 staging
                command: ./bin/cf-deploy
                environment:
                  CF_FOUNDRY_API: api.fr.wb.cloud.gov
                  CF_USER: 3a12ee9a-6986-4947-8611-9176f99a6181
                  CF_PASSWORD_NAME: CF_FOUNDRY_1_STAGE_PASS
                  CF_ORG: gsa-tts-test-kits
                  CF_SPACE: staging
                  VARS_FILE: config/deployment/stage.yml
                  RAILS_MASTER_KEY_NAME: RAILS_MASTER_KEY
                  DISABLE_SMARTY_STREETS: "false"
                  RECAPTCHA_REQUIRED: "true"
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, "https://github.com/usagov/test-at-home"]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - run:
                name: Deploy to foundry 1 prod
                command: ./bin/cf-deploy
                environment:
                  CF_FOUNDRY_API: api.fr.wb.cloud.gov
                  CF_USER: b714c36d-f931-4b0c-bcfe-03eb27a1c58e
                  CF_PASSWORD_NAME: CF_FOUNDRY_1_PROD_PASS
                  CF_ORG: gsa-tts-test-kits
                  CF_SPACE: prod
                  VARS_FILE: config/deployment/prod.yml
                  RAILS_MASTER_KEY_NAME: PROD_RAILS_MASTER_KEY
                  DISABLE_SMARTY_STREETS: "false"
                  RECAPTCHA_REQUIRED: "true"
  deploy_foundry_2:
    docker:
      - image: cimg/ruby:3.0.3-node
    steps:
      - checkout
      - when:
          condition:
            or:
              - equal: [<< pipeline.git.branch >>, "main"]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - ruby/install-deps
            - run:
                name: Vendor gems
                command: bundle cache --all
            - node/install-packages:
                cache-only-lockfile: false
                cache-version: v2
                pkg-manager: yarn
            - run:
                name: Install Cloud Foundry CLI
                command: |
                  curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
                  sudo dpkg -i cf-cli_amd64.deb
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, "https://github.com/usagov/test-at-home"]
              - equal: [<< pipeline.git.branch >>, "main"]
          steps:
            - run:
                name: Deploy to foundry 2 staging
                command: ./bin/cf-deploy
                environment:
                  CF_FOUNDRY_API: api.fr.wc.cloud.gov
                  CF_USER: 9a110e9c-e42a-47b2-b281-9672fc8bcf79
                  CF_PASSWORD_NAME: CF_FOUNDRY_2_STAGE_PASS
                  CF_ORG: gsa-tts-test-kits
                  CF_SPACE: staging
                  VARS_FILE: config/deployment/stage.yml
                  RAILS_MASTER_KEY_NAME: RAILS_MASTER_KEY
                  DISABLE_SMARTY_STREETS: "false"
                  RECAPTCHA_REQUIRED: "true"
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, "https://github.com/usagov/test-at-home"]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - run:
                name: Deploy to foundry 2 prod
                command: ./bin/cf-deploy
                environment:
                  CF_FOUNDRY_API: api.fr.wc.cloud.gov
                  CF_USER: 13119234-66b2-4cd6-87ab-ec0e04001a50
                  CF_PASSWORD_NAME: CF_FOUNDRY_2_PROD_PASS
                  CF_ORG: gsa-tts-test-kits
                  CF_SPACE: prod
                  VARS_FILE: config/deployment/prod.yml
                  RAILS_MASTER_KEY_NAME: PROD_RAILS_MASTER_KEY
                  DISABLE_SMARTY_STREETS: "false"
                  RECAPTCHA_REQUIRED: "true"
  deploy_foundry_3:
    docker:
      - image: cimg/ruby:3.0.3-node
    steps:
      - checkout
      - when:
          condition:
            or:
              - equal: [<< pipeline.git.branch >>, "main"]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - ruby/install-deps
            - run:
                name: Vendor gems
                command: bundle cache --all
            - node/install-packages:
                cache-only-lockfile: false
                cache-version: v2
                pkg-manager: yarn
            - run:
                name: Install Cloud Foundry CLI
                command: |
                  curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
                  sudo dpkg -i cf-cli_amd64.deb
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, "https://github.com/usagov/test-at-home"]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - run:
                name: Deploy to foundry 3 prod
                command: ./bin/cf-deploy
                environment:
                  CF_FOUNDRY_API: api.fr.ea.cloud.gov
                  CF_USER: a4b5dfa2-5a83-4a69-a83d-2a314e42663e
                  CF_PASSWORD_NAME: CF_FOUNDRY_3_PROD_PASS
                  CF_ORG: gsa-tts-test-kits
                  CF_SPACE: prod
                  VARS_FILE: config/deployment/prod.yml
                  RAILS_MASTER_KEY_NAME: PROD_RAILS_MASTER_KEY
                  DISABLE_SMARTY_STREETS: "false"
                  RECAPTCHA_REQUIRED: "true"
  deploy_foundry_4:
    docker:
      - image: cimg/ruby:3.0.3-node
    steps:
      - checkout
      - when:
          condition:
            or:
              - equal: [<< pipeline.git.branch >>, "main"]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - ruby/install-deps
            - run:
                name: Vendor gems
                command: bundle cache --all
            - node/install-packages:
                cache-only-lockfile: false
                cache-version: v2
                pkg-manager: yarn
            - run:
                name: Install Cloud Foundry CLI
                command: |
                  curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
                  sudo dpkg -i cf-cli_amd64.deb
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, "https://github.com/usagov/test-at-home"]
              - equal: [<< pipeline.git.branch >>, "main"]
          steps:
            - run:
                name: Deploy to foundry 4 staging
                command: ./bin/cf-deploy
                environment:
                  CF_FOUNDRY_API: api.fr.eb.cloud.gov
                  CF_USER: 0c1293e1-b167-49b3-9b5a-29878e2af429
                  CF_PASSWORD_NAME: CF_FOUNDRY_4_STAGE_PASS
                  CF_ORG: gsa-tts-test-kits
                  CF_SPACE: staging
                  VARS_FILE: config/deployment/stage.yml
                  RAILS_MASTER_KEY_NAME: RAILS_MASTER_KEY
                  DISABLE_SMARTY_STREETS: "false"
                  RECAPTCHA_REQUIRED: "true"
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, "https://github.com/usagov/test-at-home"]
              - equal: [<< pipeline.git.branch >>, "production"]
          steps:
            - run:
                name: Deploy to foundry 4 prod
                command: ./bin/cf-deploy
                environment:
                  CF_FOUNDRY_API: api.fr.eb.cloud.gov
                  CF_USER: 57e67907-7715-4172-a085-53d0bd94ee2d
                  CF_PASSWORD_NAME: CF_FOUNDRY_4_PROD_PASS
                  CF_ORG: gsa-tts-test-kits
                  CF_SPACE: prod
                  VARS_FILE: config/deployment/prod.yml
                  RAILS_MASTER_KEY_NAME: PROD_RAILS_MASTER_KEY
                  DISABLE_SMARTY_STREETS: "false"
                  RECAPTCHA_REQUIRED: "true"

workflows:
  version: 2.1
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - brakeman:
          requires:
            - build
      - dependency_audits:
          requires:
            - build
      - owasp_scan:
          requires:
            - build
      - a11y_scan:
          requires:
            - build
      - deploy_foundry_1:
          requires:
            - test
            - brakeman
            - dependency_audits
            - owasp_scan
            - a11y_scan
      - deploy_foundry_2:
          requires:
            - test
            - brakeman
            - dependency_audits
            - owasp_scan
            - a11y_scan
      - deploy_foundry_3:
          requires:
            - test
            - brakeman
            - dependency_audits
            - owasp_scan
            - a11y_scan
      - deploy_foundry_4:
          requires:
            - test
            - brakeman
            - dependency_audits
            - owasp_scan
            - a11y_scan
  daily_scan:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - dev
                - main
                - production
    jobs:
      - build
      - brakeman:
          requires:
            - build
      - dependency_audits:
          requires:
            - build
      - owasp_scan:
          requires:
            - build
